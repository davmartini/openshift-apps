---
apiVersion: v1
kind: Namespace
metadata:
  name: amq-core

---
apiVersion: v1
kind: Namespace
metadata:
  name: amq-consumer

---
apiVersion: v1
kind: Namespace
metadata:
  name: amq-producer

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: amq-service-account
  namespace: amq-core

---
apiVersion: v1
kind: Template
labels:
  template: amq63-persistent-ssl-configmap
  xpaas: 1.5.0
message: "A new persistent messaging service has been created in your project. \nIt
  will handle the protocol(s) \"${MQ_PROTOCOL}\". \nThe username/password for accessing
  the service is ${MQ_USERNAME}/${MQ_PASSWORD}. \nTo activate MESH configuration it
  is needed to execute the following command 'oc policy add-role-to-user view system:serviceaccount:$(oc project -q):amq-service-account'."
metadata:
  annotations:
    description: Application template for AMQ brokers. These will be deployed
      a HA Service with persistent storage in a network of brokers.\n
      This template supports SSL and requires usage of OpenShift secrets. Its configuration will be read\n
      from an Openshift ConfigMap that stores activemq.xml.\n
      It is YOUR RESPONSABILITY to configure correctly AMQ with this file
    iconClass: icon-jboss
    openshift.io/display-name: Red Hat AMQ 6.3 (Persistent with SSL,Broker configuration in a ConfigMap)
    tags: messaging,amq,jboss,xpaas
    version: 1.5.0
  creationTimestamp: null
  name: amq63-persistent-ssl-configmap
  namespace: amq-core
objects:
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: amq-service-account
- apiVersion: v1
  kind: RoleBinding
  metadata:
    name: view
  roleRef:
    name: view
  subjects:
  - kind: ServiceAccount
    name: amq-service-account
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's MQTT SSL port.
    labels:
      app: amq63-persistent-ssl-configmap
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-mqtt-ssl
  spec:
    ports:
    - port: 8883
      targetPort: 8883
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's OpenWire port.
    labels:
      app: amq63-persistent-ssl-configmap
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-tcp
  spec:
    ports:
    - port: 61616
      targetPort: 61616
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's OpenWire port to use by the mesh
    labels:
      app: amq63-persistent-ssl-configmap
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-tcp-mesh
  spec:
    ports:
    - port: 61616
      targetPort: 61616
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's OpenWire (SSL) port.
    labels:
      app: amq63-persistent-ssl-configmap
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-tcp-ssl
  spec:
    ports:
    - port: 61617
      targetPort: 61617
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: amq63-persistent-ssl-configmap
      app-type: amq63
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq
  spec:
    replicas: 2
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
    strategy:
      resources:
        limits:
          cpu: ${AMQ_CPU_LIMIT}
          memory: ${AMQ_MEMORY_LIMIT}
        requests:
          cpu: ${AMQ_CPU_REQUEST}
          memory: ${AMQ_MEMORY_REQUEST}
      rollingParams:
        maxSurge: 0
      type: Rolling
    template:
      metadata:
        labels:
          app-type: amq63
          application: ${APPLICATION_NAME}
          deploymentConfig: ${APPLICATION_NAME}-amq
        name: ${APPLICATION_NAME}-amq
      spec:
        containers:
        - env:
          - name: AMQ_USER
            value: ${MQ_USERNAME}
          - name: AMQ_PASSWORD
            value: ${MQ_PASSWORD}
          - name: AMQ_SPLIT
            value: ${AMQ_SPLIT}
          - name: AMQ_MESH_DISCOVERY_TYPE
            value: ${AMQ_MESH_DISCOVERY_TYPE}
          - name: AMQ_MESH_SERVICE_NAME
            value: ${APPLICATION_NAME}-amq-tcp-mesh
          - name: AMQ_MESH_SERVICE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: AMQ_KEYSTORE_TRUSTSTORE_DIR
            value: /etc/amq-secret-volume
          - name: AMQ_TRUSTSTORE
            value: ${AMQ_TRUSTSTORE}
          - name: AMQ_TRUSTSTORE_PASSWORD
            value: ${AMQ_TRUSTSTORE_PASSWORD}
          - name: AMQ_KEYSTORE
            value: ${AMQ_KEYSTORE}
          - name: AMQ_KEYSTORE_PASSWORD
            value: ${AMQ_KEYSTORE_PASSWORD}
          - name: AMQ_STORAGE_USAGE_LIMIT
            value: ${AMQ_STORAGE_USAGE_LIMIT}
          - name: ACTIVEMQ_ENCRYPTION_PASSWORD
            value: ${ACTIVEMQ_ENCRYPTION_PASSWORD}
          - name: AMQ_JMXTRANX_AGENT
            value: ${AMQ_JMXTRANX_AGENT}
          image: ${REGISTRY_IMAGE}:${REGISTRY_IMAGE_VERSION}
          imagePullPolicy: Always
          name: ${APPLICATION_NAME}-amq
          resources:
            limits:
              cpu: ${AMQ_CPU_LIMIT}
              memory: ${AMQ_MEMORY_LIMIT}
            requests:
              cpu: ${AMQ_CPU_REQUEST}
              memory: ${AMQ_MEMORY_REQUEST}
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 5672
            name: amqp
            protocol: TCP
          - containerPort: 5671
            name: amqp-ssl
            protocol: TCP
          - containerPort: 1883
            name: mqtt
            protocol: TCP
          - containerPort: 8883
            name: mqtt-ssl
            protocol: TCP
          - containerPort: 61613
            name: stomp
            protocol: TCP
          - containerPort: 61612
            name: stomp-ssl
            protocol: TCP
          - containerPort: 61616
            name: tcp
            protocol: TCP
          - containerPort: 61617
            name: tcp-ssl
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - /opt/amq/bin/readinessProbe.sh
          livenessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - /opt/amq/bin/readinessProbe.sh
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          volumeMounts:
          - mountPath: /opt/amq/data
            name: ${APPLICATION_NAME}-amq-pvol
          - mountPath: /opt/amq/conf
            name: ${APPLICATION_NAME}-configuration-pvol
          - mountPath: /etc/amq-secret-volume
            name: broker-secret-volume
            readOnly: true
        serviceAccount: amq-service-account
        serviceAccountName: amq-service-account
        terminationGracePeriodSeconds: 60
        volumes:
        - name: ${APPLICATION_NAME}-amq-pvol
          persistentVolumeClaim:
            claimName: ${APPLICATION_NAME}-amq-claim
        - name: ${APPLICATION_NAME}-configuration-pvol
          configMap:
            defaultMode: 420
            name: ${APPLICATION_NAME}-configuration-pvol
        - name: broker-secret-volume
          secret:
            secretName: ${AMQ_SECRET}
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: amq63-persistent-ssl-configmap
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-drainer
  spec:
    replicas: 1
    selector:
      deploymentConfig: ${APPLICATION_NAME}-drainer
    strategy:
      type: Recreate
      resources:
        limits:
          cpu: ${MQ_PV_MONITOR_CPU_LIMIT}
          memory: ${MQ_PV_MONITOR_MEMORY_LIMIT}
        requests:
          cpu: ${MQ_PV_MONITOR_CPU_REQUEST}
          memory: ${MQ_PV_MONITOR_MEMORY_REQUEST}
    template:
      metadata:
        labels:
          app: amq63-persistent-ssl-configmap
          application: ${APPLICATION_NAME}
          deploymentConfig: ${APPLICATION_NAME}-drainer
        name: ${APPLICATION_NAME}-drainer
      spec:
        containers:
        - command:
          - /opt/amq/bin/drain.sh
          env:
          - name: AMQ_USER
            value: ${MQ_USERNAME}
          - name: AMQ_PASSWORD
            value: ${MQ_PASSWORD_PLAIN}
          - name: AMQ_MESH_SERVICE_NAME
            value: ${APPLICATION_NAME}-amq-tcp-mesh
          - name: AMQ_MESH_SERVICE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: ${REGISTRY_IMAGE}:${REGISTRY_IMAGE_VERSION}
          imagePullPolicy: Always
          name: ${APPLICATION_NAME}-drainer
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 61616
            name: tcp
            protocol: TCP
          volumeMounts:
          - mountPath: /opt/amq/data
            name: ${APPLICATION_NAME}-amq-pvol
          resources:
            limits:
              cpu: ${MQ_PV_MONITOR_CPU_LIMIT}
              memory: ${MQ_PV_MONITOR_MEMORY_LIMIT}
            requests:
              cpu: ${MQ_PV_MONITOR_CPU_REQUEST}
              memory: ${MQ_PV_MONITOR_MEMORY_REQUEST}
        serviceAccount: amq-service-account
        serviceAccountName: amq-service-account
        terminationGracePeriodSeconds: 60
        volumes:
        - name: ${APPLICATION_NAME}-amq-pvol
          persistentVolumeClaim:
            claimName: ${APPLICATION_NAME}-amq-claim
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: amq63-persistent-ssl-configmap
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq-claim
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
parameters:
- description: The name for the application.
  displayName: Application Name
  name: APPLICATION_NAME
  required: true
  value: amq-broker-ssl
- description: Split the data directory for each node in a mesh.
  displayName: Split Data
  name: AMQ_SPLIT
  required: true
  value: "true"
- description: Size of the volume used by A-MQ for persisting messages.
  displayName: A-MQ Volume Size
  name: VOLUME_CAPACITY
  required: true
  value: 512Mi
- description: User name for standard broker user.  It is required for connecting
    to the broker.  If left empty, it will be generated. If you have LDAP in your activemq.xml
    you have to use an Active Directory user mapped to 'admin' in groups,properties
  displayName: A-MQ Username
  from: user[a-zA-Z0-9]{3}
  generate: expression
  name: MQ_USERNAME
  required: true
- description: Password for standard broker user.  It is required for connecting to
    the broker.  If left empty, it will be generated.
  displayName: A-MQ Password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: MQ_PASSWORD
  required: true
- description: Password for standard broker user.  It is required for connecting to
    the broker.  If left empty, it will be generated.
  displayName: A-MQ Password in plain
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: MQ_PASSWORD_PLAIN
  required: true
- description: The discovery agent type to use for discovering mesh endpoints.  'dns'
    will use OpenShift's DNS service to resolve endpoints.  'kube' will use Kubernetes
    REST API to resolve service endpoints.  If using 'kube' the service account for
    the pod must have the 'view' role, which can be added via 'oc policy add-role-to-user
    view system:serviceaccount:<namespace>:amq-service-account' where <namespace>
    is the project namespace.
  displayName: A-MQ Mesh Discovery Type
  name: AMQ_MESH_DISCOVERY_TYPE
  value: kube
- description: Name of a secret containing SSL related files
  displayName: Secret Name
  name: AMQ_SECRET
  required: true
  value: broker-secret-volume
- description: SSL trust store filename
  displayName: Trust Store Filename
  name: AMQ_TRUSTSTORE
  required: true
  value: amq-broker.jks
- description: SSL trust store password
  displayName: Trust Store Password
  name: AMQ_TRUSTSTORE_PASSWORD
  required: true
- description: SSL key store filename
  displayName: A-MQ Keystore Filename
  name: AMQ_KEYSTORE
  required: true
  value: amq-broker.jks
- description: Password for accessing SSL keystore
  displayName: A-MQ Keystore Password
  name: AMQ_KEYSTORE_PASSWORD
  required: true
- description: The A-MQ storage usage limit
  displayName: A-MQ Storage Limit
  name: AMQ_STORAGE_USAGE_LIMIT
  value: 100 gb
- description: FQDN of AMQ Middleware image deployed in a Images Registry
  displayName: FQDN of AMQ Middleware image deployed in a Images Registry
  name: REGISTRY_IMAGE
  required: true
  value: quay.io/dgrigore/amq-configmap
- description: Version of AMQ Middleware image deployed in a Images Registry
  displayName: FQDN of AMQ Middleware image deployed in a Images Registry
  name: REGISTRY_IMAGE_VERSION
  required: true
  value: 0.1.6-ose-1.4-13
- description: The A-MQ CPU Limit
  displayName: A-MQ CPU Limit
  name: AMQ_CPU_LIMIT
  value: "1000m"
- description: The A-MQ Memory Limit
  displayName: A-MQ Memory Limit
  name: AMQ_MEMORY_LIMIT
  value: "2048Mi"
- description: The A-MQ CPU Request
  displayName: A-MQ CPU Request
  name: AMQ_CPU_REQUEST
  value: "250m"
- description: The A-MQ Memory Request
  displayName: A-MQ CPU Request
  name: AMQ_MEMORY_REQUEST
  value: "1024Mi"
- description: The MQ-PV Monitor CPU Limit
  displayName: MQ-PV Monitor CPU Limit
  name: MQ_PV_MONITOR_CPU_LIMIT
  value: "800m"
- description: The MQ-PV Monitor Memory Limit
  displayName: MQ-PV Monitor Memory Limit
  name: MQ_PV_MONITOR_MEMORY_LIMIT
  value: "1024Mi"
- description: The MQ-PV Monitor CPU Request
  displayName: MQ-PV Monitor CPU Request
  name: MQ_PV_MONITOR_CPU_REQUEST
  value: "100m"
- description: The MQ-PV Monitor Memory Request
  displayName: MQ-PV Monitor CPU Request
  name: MQ_PV_MONITOR_MEMORY_REQUEST
  value: "1024Mi"
- description: Encryption password to encrypt/decrypt user credentials and sensible data.
  displayName: A-MQ Encryption Password for User Credentials
  name: ACTIVEMQ_ENCRYPTION_PASSWORD
  required: true
- description: Activate jmxtrans agent to monitor, collect and send metrics.
  displayName: Activate jmxtrans agent
  name: AMQ_JMXTRANX_AGENT
  required: true
  value: "true"

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: bm-amq-producer
  name: bm-amq-producer
  namespace: amq-producer
spec:
  ports:
  - name: 8080-tcp
    port: 8080
    protocol: TCP
    targetPort: 8080
  - name: 8778-tcp
    port: 8778
    protocol: TCP
    targetPort: 8778
  - name: 9779-tcp
    port: 9779
    protocol: TCP
    targetPort: 9779
  selector:
    app: bm-amq-producer
    deploymentconfig: bm-amq-producer
  sessionAffinity: None
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: bm-amq-consumer
  name: bm-amq-consumer
  namespace: amq-consumer
spec:
  ports:
  - name: 8080-tcp
    port: 8080
    protocol: TCP
    targetPort: 8080
  - name: 8778-tcp
    port: 8778
    protocol: TCP
    targetPort: 8778
  - name: 9779-tcp
    port: 9779
    protocol: TCP
    targetPort: 9779
  selector:
    app: bm-amq-consumer
    deploymentconfig: bm-amq-consumer
  sessionAffinity: None
  type: ClusterIP

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: producer-state
  labels:
    app: bm-amq-producer
  namespace: amq-producer
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: consumer-state
  labels:
    app: bm-amq-consumer
  namespace: amq-consumer
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  labels:
    app: bm-amq-producer
  name: bm-amq-producer
  namespace: amq-producer
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    app: bm-amq-producer
    deploymentconfig: bm-amq-producer
  strategy:
    activeDeadlineSeconds: 21600
    resources: {}
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  template:
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewApp
      creationTimestamp: null
      labels:
        app: bm-amq-producer
        deploymentconfig: bm-amq-producer
    spec:
      containers:
      - env:
        - name: ACTIVEMQ_BROKER_PASSWORD
          value: p4ss
        - name: ACTIVEMQ_BROKER_USERNAME
          value: admin
        - name: ACTIVEMQ_SERVICE_HOST
          value: amq-broker-ssl-amq-tcp.amq-core.svc.cluster.local
        - name: ACTIVEMQ_SERVICE_PORT
          value: "61616"
        - name: ACTIVEMQ_SERVICE_PROTOCOL
          value: tcp
        - name: CONSUMERS
          value: "20"
        - name: JAVA_MAX_MEM_RATIO
          value: "75"
        - name: MAX_CONNECTIONS
          value: "50"
        - name: PERFORMANCE_QUEUE_ONE
          value: amq-performance.inbox
        - name: PRODUCERS
          value: "10"
        image: quay.io/dgrigore/bm-amq-producer:stable
        imagePullPolicy: Always
        name: bm-amq-producer
        ports:
        - containerPort: 9779
          protocol: TCP
        - containerPort: 8080
          protocol: TCP
        - containerPort: 8778
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
          - mountPath: "/var/state"
            name: producer-state
      volumes:
      - name: producer-state
        persistentVolumeClaim:
          claimName: producer-state
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30

---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  labels:
    app: bm-amq-consumer
  name: bm-amq-consumer
  namespace: amq-consumer
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    app: bm-amq-consumer
    deploymentconfig: bm-amq-consumer
  strategy:
    activeDeadlineSeconds: 21600
    resources: {}
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  template:
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewApp
      creationTimestamp: null
      labels:
        app: bm-amq-consumer
        deploymentconfig: bm-amq-consumer
    spec:
      containers:
        - env:
            - name: ACTIVEMQ_BROKER_PASSWORD
              value: p4ss
            - name: ACTIVEMQ_BROKER_USERNAME
              value: admin
            - name: ACTIVEMQ_SERVICE_HOST
              value: amq-broker-ssl-amq-tcp.amq-core.svc.cluster.local
            - name: ACTIVEMQ_SERVICE_PORT
              value: "61616"
            - name: ACTIVEMQ_SERVICE_PROTOCOL
              value: tcp
            - name: CONSUMERS
              value: "20"
            - name: JAVA_MAX_MEM_RATIO
              value: "75"
            - name: MAX_CONNECTIONS
              value: "50"
            - name: PERFORMANCE_QUEUE_ONE
              value: amq-performance.inbox
          image: quay.io/dgrigore/bm-amq-consumer:stable
          imagePullPolicy: Always
          name: bm-amq-consumer
          ports:
            - containerPort: 9779
              protocol: TCP
            - containerPort: 8080
              protocol: TCP
            - containerPort: 8778
              protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: "/var/state"
              name: consumer-state
      volumes:
        - name: consumer-state
          persistentVolumeClaim:
            claimName: consumer-state
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30

